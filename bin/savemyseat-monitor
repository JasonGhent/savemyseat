#!/usr/bin/env node
var path = require('path');
var program = require('commander');
var request = require('superagent');
var _ = require('lodash');
var Savemyseat = require('../lib/savemyseat').Savemyseat;

function getNumber(val) {
  return parseInt(val);
}

program
  .version('0.1.0')
  .option('-d, --db-url [dbUrl]', 'The database host [http://127.0.0.1:5984]', 'http://127.0.0.1:5984')
  .option('-i, --poll-interval [pollInterval]', 'The interval by which to poll the couchdb server', getNumber, 10000)
  .option('-t, --document-count-delta-threshold [documentCountDeltaThreshold]', 'When comparing source and destination, this is the threshold for the document count delta. Any delta greater than this triggers an error', getNumber, 100)
  .parse(process.argv);

/**
 * Runner for the monitoring daemon
 */
function monitor() {

  var savemyseat = Savemyseat.loadConfigFromFile(program.dbUrl, program.args[0]);
  var monitoringDaemon = savemyseat.monitor(program.pollInterval, {
    documentCountDeltaThreshold: program.documentCountDeltaThreshold
  });

  monitoringDaemon.on('error-triggered', function(name, messages, id) {
    console.log(JSON.stringify({
      id: id,
      type: "error-triggered",
      name: name,
      messages: messages
    }));
  });
  
  monitoringDaemon.on('error-resolved', function(name, messages, id) {
    console.log(JSON.stringify({
      id: id,
      type: "error-resolved",
      name: name,
      messages: messages
    }));
  });

  monitoringDaemon.on('error', function(err) {
    console.log(JSON.stringify(err));
  });
  
  process.on('SIGTERM', function() {
    monitoringDaemon.stop();
  });
  process.on('SIGINT', function() {
    monitoringDaemon.stop();
  });
}

monitor();
