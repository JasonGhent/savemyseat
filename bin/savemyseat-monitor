#!/usr/bin/env node
/**
 * savemyseat-monitor
 *
 * Copyright 2015 Virtru Corporation
 * 
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *        http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
var path = require('path');
var program = require('commander');
var request = require('superagent');
var _ = require('lodash');
var util = require('util');
var Savemyseat = require('../lib/savemyseat').Savemyseat;

function getNumber(val) {
  return parseInt(val);
}

program
  .version(require('../package.json').version)
  .option('-d, --db-url [dbUrl]', 'The database host [http://127.0.0.1:5984]', 'http://127.0.0.1:5984')
  .option('-i, --poll-interval [pollInterval]', 'The interval by which to poll the couchdb server', getNumber, 10000)
  .option('-t, --document-count-delta-threshold [documentCountDeltaThreshold]', 'When comparing source and destination, this is the threshold for the document count delta. Any delta greater than this triggers an error', getNumber, 100)
  .option('-n, --notifier [notifier]', 'The notifier to use. Defaults to [pagerduty]', 'pagerduty')
  .parse(process.argv);

/**
 * Runner for the monitoring daemon
 */
function monitor() {

  var savemyseat = Savemyseat.loadConfigFromFile(program.dbUrl, program.args[0]);
  var monitoringDaemon = savemyseat.monitor(program.pollInterval, {
    documentCountDeltaThreshold: program.documentCountDeltaThreshold
  });

  var notifier = require(util.format('../lib/notifiers/%s', program.notifier))(monitoringDaemon);

  monitoringDaemon.on('error-triggered', function(name, messages, id) {
    console.error(JSON.stringify({
      id: id,
      type: "error-triggered",
      name: name,
      messages: messages
    }));
  });
  
  monitoringDaemon.on('error-resolved', function(name, messages, id) {
    console.error(JSON.stringify({
      id: id,
      type: "error-resolved",
      name: name,
      messages: messages
    }));
  });

  monitoringDaemon.on('error', function(err) {
    console.error(JSON.stringify(err));
  });
  
  process.on('SIGTERM', function() {
    monitoringDaemon.stop();
  });
  process.on('SIGINT', function() {
    monitoringDaemon.stop();
  });
}

monitor();
